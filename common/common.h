/*  Definitions for common data types and macros
 *
 *  @file common.h
 *
 *  Created by Sunrise Telephone Systems KK
 *
 *  This file ("common.h") is hereby released into the public domain.
 *
 */

#ifndef COMMON_H
#define COMMON_H


// ---------------------------------------------------------------------------
// Import integer and boolean types
// ---------------------------------------------------------------------------

#include <stdint.h>
#include <stdbool.h>


// ---------------------------------------------------------------------------
// Type uchar_t, unsigned character
// ---------------------------------------------------------------------------

typedef unsigned char uchar_t;

// ---------------------------------------------------------------------------
// Type octet_t, unsigned integer 8 bit
// ---------------------------------------------------------------------------

typedef uint8_t octet_t;

// ---------------------------------------------------------------------------
// Type word_t, unsigned integer 16 bit
// ---------------------------------------------------------------------------

typedef uint16_t word_t;

// ---------------------------------------------------------------------------
// Type uint_t, unsigned integer 32 bit
// ---------------------------------------------------------------------------

typedef uint32_t uint_t;

// ---------------------------------------------------------------------------
// Type cardinal, default unsigned integer, implementation dependent
// ---------------------------------------------------------------------------

typedef unsigned int cardinal;

// ---------------------------------------------------------------------------
// Type opaque_t, opaque pointer type
// ---------------------------------------------------------------------------

typedef void *opaque_t;

// ---------------------------------------------------------------------------
// Type dbuf_t, data buffer type
// ---------------------------------------------------------------------------

typedef struct {
	word_t  length;
	octet_t octet[0];
} dbuf_t;

// ---------------------------------------------------------------------------
// Type file_pos_t, file position type, 16 bit line and coloumn fields
// ---------------------------------------------------------------------------

typedef struct {
    uint16_t line;
    uint16_t col;
} file_pos_t;

// ---------------------------------------------------------------------------
// Type long_file_pos_t, file position type, 32 bit line and coloumn fields
// ---------------------------------------------------------------------------

typedef struct {
    uint32_t line;
    uint32_t col;
} long_file_pos_t;


// ---------------------------------------------------------------------------
// macro: fmacro
// ---------------------------------------------------------------------------
// function attribute to force inlining, gcc only, modify for other compilers

#define fmacro inline __attribute__((always_inline))

// ---------------------------------------------------------------------------
// macro: EMPTY_STRING
// ---------------------------------------------------------------------------

#define EMPTY_STRING "\0"

// ---------------------------------------------------------------------------
// macro: NOT(bool_expr)
// ---------------------------------------------------------------------------

#define NOT(x) !(x)

// ---------------------------------------------------------------------------
// macro: MAX(x, y)
// ---------------------------------------------------------------------------
// maximum of x and y

#define MAX(x,y)	((x) > (y) ? (x) : (y))

// ---------------------------------------------------------------------------
// macro: MAX3(x, y, z)
// ---------------------------------------------------------------------------
// maximum of x, y and z

#define MAX3(x,y,z)	((x) > (y) ? MAX(x,z) : MAX(y,z))

// ---------------------------------------------------------------------------
// macro: MIN(x, y)
// ---------------------------------------------------------------------------
// minimum of x and y

#define MIN(x,y)	((x) < (y) ? (x) : (y))

// ---------------------------------------------------------------------------
// macro: MIN3(x, y, z)
// ---------------------------------------------------------------------------
// minimum of x, y and z

#define MIN3(x,y,z)	((x) < (y) ? MIN(x,z) : MIN(y,z))

// ---------------------------------------------------------------------------
// macro: loop
// ---------------------------------------------------------------------------
// Algol style endless loop

#define loop while(1)

// ---------------------------------------------------------------------------
// macros: repeat ... until(bool_expr)
// ---------------------------------------------------------------------------
// Algol style repeat ... until loop

#define repeat do
#define until(x) while (!(x))

// ---------------------------------------------------------------------------
// macro: SET_FPOS(pos, line, col)
// ---------------------------------------------------------------------------
// Sets the line and coloumn fields of <pos> to <line> and <col>

#define SET_FPOS(_fpos,_line,_col) { _fpos.line=_line; _fpos.col=_col; }

// ---------------------------------------------------------------------------
// macro: ASSIGN_BY_REF(pointer, value)
// ---------------------------------------------------------------------------
// Sets the value of *<pointer> to <value> if <pointer> is not NULL

#define ASSIGN_BY_REF(_p,_value) { if (_p != NULL) *_p = _value; }


#endif /* COMMON_H */

// END OF FILE